"use strict";Object.defineProperty(exports, "__esModule", {value: true});var _clarity = require('micro-stacks/clarity');var S="ST000000000000000000002AMW42H",A= exports.MAINNET_BURN_ADDRESS ="SP000000000000000000002Q6VF78",C= exports.toCamelCase =(t,e)=>{let n=typeof t=="string"?t:String(t),[a,...r]=n.replace("!","").replace("?","").split("-"),s=e?`${a[0].toUpperCase()}${a.slice(1)}`:a;return r.forEach(f=>{s+=f[0].toUpperCase()+f.slice(1)}),s},_= exports.getContractNameFromPath =t=>{let e=t.split("/"),n=e[e.length-1],[a]=n.split(".");return a},ct= exports.getContractIdentifier =t=>`${t.address}.${t.name}`,pt= exports.getContractPrincipalCV =t=>{let e=_(t.contractFile);return _clarity.contractPrincipalCV.call(void 0, t.address,e)};function ut(t,e){return`${e?A:S}.${t}`}var O=(i=>(i.ContractEvent="contract_event",i.StxTransferEvent="stx_transfer_event",i.StxMintEvent="stx_mint_event",i.StxBurnEvent="stx_burn_event",i.StxLockEvent="stx_lock_event",i.NftTransferEvent="nft_transfer_event",i.NftMintEvent="nft_mint_event",i.NftBurnEvent="nft_burn_event",i.FtTransferEvent="ft_transfer_event",i.FtMintEvent="ft_mint_event",i.FtBurnEvent="ft_burn_event",i))(O||{});function lt(t,e){return t.filter(n=>n.type===e)}function Ct(t,e={}){let n={};for(let a in t){let r=t[a],s=e.deployerAddress||r.address,f=`${s}.${r.name}`,p=r.contract(s,r.name);n[a]={identifier:f,contract:p}}return n}var _transactions = require('micro-stacks/transactions');var _common = require('micro-stacks/common');function Q(t){return{isOk:!0,value:t}}function W(t){return{isOk:!1,value:t}}function E(t){if(t.type===_clarity.ClarityType.PrincipalStandard)return _clarity.addressToString.call(void 0, t.address);if(t.type===_clarity.ClarityType.PrincipalContract)return`${_clarity.addressToString.call(void 0, t.address)}.${t.contractName.content}`;throw new Error(`Unexpected principal data: ${JSON.stringify(t)}`)}function c(t,e=!1){switch(t.type){case _clarity.ClarityType.BoolTrue:return!0;case _clarity.ClarityType.BoolFalse:return!1;case _clarity.ClarityType.Int:case _clarity.ClarityType.UInt:return t.value;case _clarity.ClarityType.Buffer:return t.buffer;case _clarity.ClarityType.OptionalNone:return null;case _clarity.ClarityType.OptionalSome:return c(t.value);case _clarity.ClarityType.ResponseErr:return e?W(c(t.value)):c(t.value);case _clarity.ClarityType.ResponseOk:return e?Q(c(t.value)):c(t.value);case _clarity.ClarityType.PrincipalStandard:case _clarity.ClarityType.PrincipalContract:return E(t);case _clarity.ClarityType.List:return t.list.map(r=>c(r));case _clarity.ClarityType.Tuple:let n={};return Object.keys(t.data).map(r=>[r,c(t.data[r])]).forEach(([r,s])=>{n[r]=s}),n;case _clarity.ClarityType.StringASCII:return t.data;case _clarity.ClarityType.StringUTF8:return t.data}}function At(t,e=!1){return c(_clarity.hexToCV.call(void 0, t),e)}function x(t){if(!(typeof t=="bigint"||typeof t=="number"||typeof t=="string"))throw new Error("Invalid input type for integer");return BigInt(t)}function l(t,e){if(_transactions.isClarityAbiTuple.call(void 0, e)){if(typeof t!="object")throw new Error("Invalid tuple input");let n={};return e.tuple.forEach(a=>{let r=t[a.name];n[a.name]=l(r,a.type)}),_clarity.tupleCV.call(void 0, n)}else if(_transactions.isClarityAbiList.call(void 0, e)){let a=t.map(r=>l(r,e.list.type));return _clarity.listCV.call(void 0, a)}else{if(_transactions.isClarityAbiOptional.call(void 0, e))return t?_clarity.someCV.call(void 0, l(t,e.optional)):_clarity.noneCV.call(void 0, );if(_transactions.isClarityAbiStringAscii.call(void 0, e)){if(typeof t!="string")throw new Error("Invalid string-ascii input");return _clarity.stringAsciiCV.call(void 0, t)}else if(_transactions.isClarityAbiStringUtf8.call(void 0, e)){if(typeof t!="string")throw new Error("Invalid string-ascii input");return _clarity.stringUtf8CV.call(void 0, t)}else if(e==="bool"){let n=typeof t=="boolean"?t.toString():t;return _transactions.parseToCV.call(void 0, n,e)}else if(e==="uint128"){let n=x(t);return _clarity.uintCV.call(void 0, n.toString())}else if(e==="int128"){let n=x(t);return _clarity.intCV.call(void 0, n.toString())}else if(e==="trait_reference"){if(typeof t!="string")throw new Error("Invalid input for trait_reference");let[n,a]=t.split(".");return _clarity.contractPrincipalCV.call(void 0, n,a)}else if(_transactions.isClarityAbiBuffer.call(void 0, e))return _clarity.bufferCV.call(void 0, t)}return _transactions.parseToCV.call(void 0, t,e)}function d(t,e="hex"){switch(t.type){case _clarity.ClarityType.BoolTrue:return"true";case _clarity.ClarityType.BoolFalse:return"false";case _clarity.ClarityType.Int:return t.value.toString();case _clarity.ClarityType.UInt:return`u${t.value.toString()}`;case _clarity.ClarityType.Buffer:if(e==="tryAscii"){let n=_common.bytesToAscii.call(void 0, t.buffer);if(/[ -~]/.test(n))return JSON.stringify(n)}return`0x${_common.bytesToHex.call(void 0, t.buffer)}`;case _clarity.ClarityType.OptionalNone:return"none";case _clarity.ClarityType.OptionalSome:return`(some ${d(t.value,e)})`;case _clarity.ClarityType.ResponseErr:return`(err ${d(t.value,e)})`;case _clarity.ClarityType.ResponseOk:return`(ok ${d(t.value,e)})`;case _clarity.ClarityType.PrincipalStandard:case _clarity.ClarityType.PrincipalContract:return`'${E(t)}`;case _clarity.ClarityType.List:return`(list ${t.list.map(n=>d(n,e)).join(" ")})`;case _clarity.ClarityType.Tuple:return`(tuple ${Object.keys(t.data).map(n=>`(${n} ${d(t.data[n],e)})`).join(" ")})`;case _clarity.ClarityType.StringASCII:return`"${t.data}"`;case _clarity.ClarityType.StringUTF8:return`u"${t.data}"`}}function T(t,e){return e.map((n,a)=>l(n,t.args[a].type))}function m(t){if(t.isOk)return t.value;throw new Error(`Expected OK, received error: ${t.value}`)}function g(t){if(!t.isOk)return t.value;throw new Error(`Expected Err, received ok: ${t.value}`)}function q(t,e){return T(t,e)}function X(t,e){let n=t.abi.functions.find(r=>C(r.name)===e);if(n)return function(...r){return{functionArgs:q(n,r),contractAddress:t.contractAddress,contractName:t.contractName,function:n,nativeArgs:r}};let a=t.abi.maps.find(r=>C(r.name)===e);if(a)return r=>{let s=l(r,a.key);return{contractAddress:t.contractAddress,contractName:t.contractName,map:a,nativeKey:r,key:s}};throw new Error(`Invalid function call: no function exists for ${String(e)}`)}var Y={get:X},Z= exports.pureProxy =t=>new Proxy(t,Y);var _api = require('micro-stacks/api');async function k(t,e){let a=`${e.network.getReadOnlyFunctionCallApiUrl(t.contractAddress,t.contractName,t.function.name)}?tip=latest`,r=JSON.stringify({sender:t.contractAddress,arguments:t.functionArgs.map(p=>typeof p=="string"?p:_clarity.cvToHex.call(void 0, p))}),s=await _common.fetchPrivate.call(void 0, a,{method:"POST",body:r,headers:{"Content-Type":"application/json"}});if(!s.ok){let p="";try{p=await s.text()}catch (e2){}throw new Error(`Error calling read-only function. Response ${s.status}: ${s.statusText}. Attempted to fetch ${a} and failed with the message: "${p}"`)}let f=_api.parseReadOnlyResponse.call(void 0, await s.json());return c(f,!0)}async function Ht(t,e){let n=await k(t,e);return m(n)}async function Kt(t,e){let n=await k(t,e);return g(n)}async function Gt(t,e){let n=_clarity.cvToHex.call(void 0, t.key),a=await _api.fetchContractDataMapEntry.call(void 0, {contract_address:t.contractAddress,contract_name:t.contractName,map_name:t.map.name,lookup_key:n,tip:"latest",url:e.network.getCoreApiUrl(),proof:0}),r=_clarity.hexToCV.call(void 0, a.data);return c(r,!0)}async function Dt(t,e){let n=await _transactions.broadcastTransaction.call(void 0, t,e.network);if("error"in n)throw new Error(`Error broadcasting tx: ${n.error} - ${n.reason} - ${n.reason_data}`);return{txId:n.txid,stacksTransaction:t}}exports.CoreNodeEventType = O; exports.MAINNET_BURN_ADDRESS = A; exports.TESTNET_BURN_ADDRESS = S; exports.bootContractIdentifier = ut; exports.broadcast = Dt; exports.cvToString = d; exports.cvToValue = c; exports.err = W; exports.expectErr = g; exports.expectOk = m; exports.fetchMapGet = Gt; exports.filterEvents = lt; exports.getContractIdentifier = ct; exports.getContractNameFromPath = _; exports.getContractPrincipalCV = pt; exports.hexToCvValue = At; exports.makeContracts = Ct; exports.ok = Q; exports.parseToCV = l; exports.pureProxy = Z; exports.ro = k; exports.roErr = Kt; exports.roOk = Ht; exports.toCamelCase = C; exports.transformArgsToCV = T;
